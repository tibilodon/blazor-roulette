@rendermode InteractiveAuto
@inject IBeerRepository BeerRepository
@inject NavigationManager NavigationManager

<button @onclick="() => HandleClick((int)Id)">
    edit
</button>

@if (show && Id == selectedId)
{
    <EditForm Model="beer" OnSubmit="HandleSubmit" FormName="editBeer">
        <label>name</label>
        <InputText @bind-Value="beer.Name">@beer.Name</InputText>
        <InputSelect @bind-Value="beer.Amount">
            @for (int i = 1; i <= 100; i++)
            {
                <option value="@i">@i</option>
            }
        </InputSelect>
        <button class="btn btn-primary" type="submit">save</button>
        @if (Id != null)
        {
            <button @onclick="DeleteBeer" class="btn btn-primary" type="button">Delete</button>

        }
    </EditForm>
}
@code {

    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    Beer beer { get; set; } = new Beer { };

    [Parameter]
    public EventCallback FetchData { get; set; }


    private async Task InvokeFetchData()
    {
        await FetchData.InvokeAsync();
        StateHasChanged();
    }

    private bool show = false;
    private int selectedId = 0;

    async Task HandleClick(int Id)
    {
        if (selectedId == Id)
        {
            // Toggle show if the same game is clicked again
            show = !show;
        }
        else
        {
            // Set the ID of the game to display and show the component
            selectedId = Id;
            show = true;
            beer = await BeerRepository.GetBeerById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await BeerRepository.AddBeer(beer);
            await InvokeFetchData();
        }
        else
        {
            show = false;
            await BeerRepository.UpdateBeer(beer);
            await InvokeFetchData();
        }
    }

    async Task DeleteBeer()
    {
        await BeerRepository.DeleteBeer((int)Id);
        await InvokeFetchData();
    }
}
