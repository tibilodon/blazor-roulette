@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using blazor_with_auth.Data

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserName" class="form-control" placeholder="Please enter your user name." />
                <label for="userName" class="form-label">Username</label>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private AppUser user = default!;
    private string? userName;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        userName = await UserManager.GetUserNameAsync(user);
        Input.UserName ??= userName;

    }

    private string? errorMessage { get; set; } = null;

    private async Task OnValidSubmitAsync()
    {
         if (Input.UserName != userName)
        {
      
            var setUsername = await UserManager.SetUserNameAsync(user, Input.UserName);

            if (!setUsername.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set userName.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
           [Display(Name = "UserName")]
        [RegularExpression(@"^\S+$", ErrorMessage = "Username field cannot contain white spaces.")]
        public string? UserName { get; set; }
    }
}
